/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.tiis.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.tiis.srv.model.TestAttempt;
import ru.tiis.srv.model.TestAttemptModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TestAttempt service. Represents a row in the &quot;TIISTestAttempt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.tiis.srv.model.TestAttemptModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestAttemptImpl}.
 * </p>
 *
 * @author Michael
 * @see TestAttemptImpl
 * @see ru.tiis.srv.model.TestAttempt
 * @see ru.tiis.srv.model.TestAttemptModel
 * @generated
 */
public class TestAttemptModelImpl extends BaseModelImpl<TestAttempt>
	implements TestAttemptModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test attempt model instance should use the {@link ru.tiis.srv.model.TestAttempt} interface instead.
	 */
	public static final String TABLE_NAME = "TIISTestAttempt";
	public static final Object[][] TABLE_COLUMNS = {
			{ "testId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "startTime", Types.TIMESTAMP },
			{ "finishTime", Types.TIMESTAMP },
			{ "result", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table TIISTestAttempt (testId LONG not null primary key,userId LONG,startTime DATE null,finishTime DATE null,result DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table TIISTestAttempt";
	public static final String ORDER_BY_JPQL = " ORDER BY testAttempt.testId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TIISTestAttempt.testId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.tiis.srv.model.TestAttempt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.tiis.srv.model.TestAttempt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ru.tiis.srv.model.TestAttempt"));

	public TestAttemptModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _testId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _testId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestAttempt.class;
	}

	@Override
	public String getModelClassName() {
		return TestAttempt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("testId", getTestId());
		attributes.put("userId", getUserId());
		attributes.put("startTime", getStartTime());
		attributes.put("finishTime", getFinishTime());
		attributes.put("result", getResult());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long testId = (Long)attributes.get("testId");

		if (testId != null) {
			setTestId(testId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date finishTime = (Date)attributes.get("finishTime");

		if (finishTime != null) {
			setFinishTime(finishTime);
		}

		Double result = (Double)attributes.get("result");

		if (result != null) {
			setResult(result);
		}
	}

	@Override
	public long getTestId() {
		return _testId;
	}

	@Override
	public void setTestId(long testId) {
		_testId = testId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@Override
	public Date getFinishTime() {
		return _finishTime;
	}

	@Override
	public void setFinishTime(Date finishTime) {
		_finishTime = finishTime;
	}

	@Override
	public double getResult() {
		return _result;
	}

	@Override
	public void setResult(double result) {
		_result = result;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TestAttempt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestAttempt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TestAttempt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestAttemptImpl testAttemptImpl = new TestAttemptImpl();

		testAttemptImpl.setTestId(getTestId());
		testAttemptImpl.setUserId(getUserId());
		testAttemptImpl.setStartTime(getStartTime());
		testAttemptImpl.setFinishTime(getFinishTime());
		testAttemptImpl.setResult(getResult());

		testAttemptImpl.resetOriginalValues();

		return testAttemptImpl;
	}

	@Override
	public int compareTo(TestAttempt testAttempt) {
		long primaryKey = testAttempt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestAttempt)) {
			return false;
		}

		TestAttempt testAttempt = (TestAttempt)obj;

		long primaryKey = testAttempt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TestAttempt> toCacheModel() {
		TestAttemptCacheModel testAttemptCacheModel = new TestAttemptCacheModel();

		testAttemptCacheModel.testId = getTestId();

		testAttemptCacheModel.userId = getUserId();

		Date startTime = getStartTime();

		if (startTime != null) {
			testAttemptCacheModel.startTime = startTime.getTime();
		}
		else {
			testAttemptCacheModel.startTime = Long.MIN_VALUE;
		}

		Date finishTime = getFinishTime();

		if (finishTime != null) {
			testAttemptCacheModel.finishTime = finishTime.getTime();
		}
		else {
			testAttemptCacheModel.finishTime = Long.MIN_VALUE;
		}

		testAttemptCacheModel.result = getResult();

		return testAttemptCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{testId=");
		sb.append(getTestId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", finishTime=");
		sb.append(getFinishTime());
		sb.append(", result=");
		sb.append(getResult());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ru.tiis.srv.model.TestAttempt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>testId</column-name><column-value><![CDATA[");
		sb.append(getTestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finishTime</column-name><column-value><![CDATA[");
		sb.append(getFinishTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TestAttempt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TestAttempt.class
		};
	private long _testId;
	private long _userId;
	private String _userUuid;
	private Date _startTime;
	private Date _finishTime;
	private double _result;
	private TestAttempt _escapedModel;
}