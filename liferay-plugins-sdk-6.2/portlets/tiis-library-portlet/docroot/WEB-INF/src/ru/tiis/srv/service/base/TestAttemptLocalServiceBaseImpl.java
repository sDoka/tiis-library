/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.tiis.srv.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ru.tiis.srv.model.TestAttempt;
import ru.tiis.srv.service.TestAttemptLocalService;
import ru.tiis.srv.service.persistence.BookPersistence;
import ru.tiis.srv.service.persistence.TestAttemptPersistence;
import ru.tiis.srv.service.persistence.TestPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the test attempt local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ru.tiis.srv.service.impl.TestAttemptLocalServiceImpl}.
 * </p>
 *
 * @author Michael
 * @see ru.tiis.srv.service.impl.TestAttemptLocalServiceImpl
 * @see ru.tiis.srv.service.TestAttemptLocalServiceUtil
 * @generated
 */
public abstract class TestAttemptLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TestAttemptLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link ru.tiis.srv.service.TestAttemptLocalServiceUtil} to access the test attempt local service.
	 */

	/**
	 * Adds the test attempt to the database. Also notifies the appropriate model listeners.
	 *
	 * @param testAttempt the test attempt
	 * @return the test attempt that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestAttempt addTestAttempt(TestAttempt testAttempt)
		throws SystemException {
		testAttempt.setNew(true);

		return testAttemptPersistence.update(testAttempt);
	}

	/**
	 * Creates a new test attempt with the primary key. Does not add the test attempt to the database.
	 *
	 * @param testId the primary key for the new test attempt
	 * @return the new test attempt
	 */
	@Override
	public TestAttempt createTestAttempt(long testId) {
		return testAttemptPersistence.create(testId);
	}

	/**
	 * Deletes the test attempt with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param testId the primary key of the test attempt
	 * @return the test attempt that was removed
	 * @throws PortalException if a test attempt with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestAttempt deleteTestAttempt(long testId)
		throws PortalException, SystemException {
		return testAttemptPersistence.remove(testId);
	}

	/**
	 * Deletes the test attempt from the database. Also notifies the appropriate model listeners.
	 *
	 * @param testAttempt the test attempt
	 * @return the test attempt that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestAttempt deleteTestAttempt(TestAttempt testAttempt)
		throws SystemException {
		return testAttemptPersistence.remove(testAttempt);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TestAttempt.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return testAttemptPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.tiis.srv.model.impl.TestAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return testAttemptPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.tiis.srv.model.impl.TestAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return testAttemptPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return testAttemptPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return testAttemptPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TestAttempt fetchTestAttempt(long testId) throws SystemException {
		return testAttemptPersistence.fetchByPrimaryKey(testId);
	}

	/**
	 * Returns the test attempt with the primary key.
	 *
	 * @param testId the primary key of the test attempt
	 * @return the test attempt
	 * @throws PortalException if a test attempt with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public TestAttempt getTestAttempt(long testId)
		throws PortalException, SystemException {
		return testAttemptPersistence.findByPrimaryKey(testId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return testAttemptPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the test attempts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ru.tiis.srv.model.impl.TestAttemptModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of test attempts
	 * @param end the upper bound of the range of test attempts (not inclusive)
	 * @return the range of test attempts
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<TestAttempt> getTestAttempts(int start, int end)
		throws SystemException {
		return testAttemptPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of test attempts.
	 *
	 * @return the number of test attempts
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getTestAttemptsCount() throws SystemException {
		return testAttemptPersistence.countAll();
	}

	/**
	 * Updates the test attempt in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param testAttempt the test attempt
	 * @return the test attempt that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestAttempt updateTestAttempt(TestAttempt testAttempt)
		throws SystemException {
		return testAttemptPersistence.update(testAttempt);
	}

	/**
	 * Returns the book local service.
	 *
	 * @return the book local service
	 */
	public ru.tiis.srv.service.BookLocalService getBookLocalService() {
		return bookLocalService;
	}

	/**
	 * Sets the book local service.
	 *
	 * @param bookLocalService the book local service
	 */
	public void setBookLocalService(
		ru.tiis.srv.service.BookLocalService bookLocalService) {
		this.bookLocalService = bookLocalService;
	}

	/**
	 * Returns the book persistence.
	 *
	 * @return the book persistence
	 */
	public BookPersistence getBookPersistence() {
		return bookPersistence;
	}

	/**
	 * Sets the book persistence.
	 *
	 * @param bookPersistence the book persistence
	 */
	public void setBookPersistence(BookPersistence bookPersistence) {
		this.bookPersistence = bookPersistence;
	}

	/**
	 * Returns the test local service.
	 *
	 * @return the test local service
	 */
	public ru.tiis.srv.service.TestLocalService getTestLocalService() {
		return testLocalService;
	}

	/**
	 * Sets the test local service.
	 *
	 * @param testLocalService the test local service
	 */
	public void setTestLocalService(
		ru.tiis.srv.service.TestLocalService testLocalService) {
		this.testLocalService = testLocalService;
	}

	/**
	 * Returns the test persistence.
	 *
	 * @return the test persistence
	 */
	public TestPersistence getTestPersistence() {
		return testPersistence;
	}

	/**
	 * Sets the test persistence.
	 *
	 * @param testPersistence the test persistence
	 */
	public void setTestPersistence(TestPersistence testPersistence) {
		this.testPersistence = testPersistence;
	}

	/**
	 * Returns the test attempt local service.
	 *
	 * @return the test attempt local service
	 */
	public ru.tiis.srv.service.TestAttemptLocalService getTestAttemptLocalService() {
		return testAttemptLocalService;
	}

	/**
	 * Sets the test attempt local service.
	 *
	 * @param testAttemptLocalService the test attempt local service
	 */
	public void setTestAttemptLocalService(
		ru.tiis.srv.service.TestAttemptLocalService testAttemptLocalService) {
		this.testAttemptLocalService = testAttemptLocalService;
	}

	/**
	 * Returns the test attempt persistence.
	 *
	 * @return the test attempt persistence
	 */
	public TestAttemptPersistence getTestAttemptPersistence() {
		return testAttemptPersistence;
	}

	/**
	 * Sets the test attempt persistence.
	 *
	 * @param testAttemptPersistence the test attempt persistence
	 */
	public void setTestAttemptPersistence(
		TestAttemptPersistence testAttemptPersistence) {
		this.testAttemptPersistence = testAttemptPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("ru.tiis.srv.model.TestAttempt",
			testAttemptLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"ru.tiis.srv.model.TestAttempt");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return TestAttempt.class;
	}

	protected String getModelClassName() {
		return TestAttempt.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = testAttemptPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ru.tiis.srv.service.BookLocalService.class)
	protected ru.tiis.srv.service.BookLocalService bookLocalService;
	@BeanReference(type = BookPersistence.class)
	protected BookPersistence bookPersistence;
	@BeanReference(type = ru.tiis.srv.service.TestLocalService.class)
	protected ru.tiis.srv.service.TestLocalService testLocalService;
	@BeanReference(type = TestPersistence.class)
	protected TestPersistence testPersistence;
	@BeanReference(type = ru.tiis.srv.service.TestAttemptLocalService.class)
	protected ru.tiis.srv.service.TestAttemptLocalService testAttemptLocalService;
	@BeanReference(type = TestAttemptPersistence.class)
	protected TestAttemptPersistence testAttemptPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private TestAttemptLocalServiceClpInvoker _clpInvoker = new TestAttemptLocalServiceClpInvoker();
}